{
  "name": "Gitcoin Passport Eligibility",
  "details": [
    "An eligibility module requiring that hat wearers have a Gitcoin Passport score over a configurable threshold"
  ],
  "links": [
    {
      "label": "GitHub",
      "link": "https://github.com/daocoa/gitcoin-passport-eligibility/"
    }
  ],
  "parameters": [
    {
      "label": "Gitcoin Passport Decoder",
      "functionName": "gitcoinPassportDecoder",
      "displayType": "default"

    },
    {
      "label": "Score Criterion",
      "functionName": "scoreCriterion",
      "displayType": "default"
    }
  ],
  "type": {
    "eligibility": true,
    "toggle": false,
    "hatter": false
  },
  "tags": [],
  "implementationAddress": "0x38a00f0eE593C048101d52B03e10c21752F2b8C4",
  "deployments": [
    {
      "chainId": "10",
      "block": "TBA"
    }
  ],
  "creationArgs": {
    "useHatId": true,
    "immutable": [
      {
        "name": "Gitcoin Passport Decoder",
        "description": "Decoder address",
        "type": "address",
        "example": "0xe53C60F8069C2f0c3a84F9B3DB5cf56f3100ba56",
        "displayType": "default"
      },
      {
        "name": "Score Criterion",
        "description": "Minimum threshold of passport to be considered eligible.",
        "type": "uint256",
        "example": "10",
        "displayType": "amount",
      "REQUESTING_INSIGHT^^^^^^^": "This is represented as a uint256 in the module smart contract. Is this correct or should I use `amount`, `amountWithDecimals` or `hat`? I do not see `amount` in the modules-registry README anywhere."

      }
    ],
    "mutable": []
  },
  "customRoles": [],
  "writeFunctions": [],
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_version",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "gitcoinPassportDecoder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IGitcoinPassportDecoder"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "HATS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IHats"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "IMPLEMENTATION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "scoreCriterion",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getWearerStatus",
      "inputs": [
        {
          "name": "_wearer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "eligible",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "standing",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hatId",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "isHuman",
      "inputs": [
        {
          "name": "_wearer",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setUp",
      "inputs": [
        {
          "name": "_initData",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "version_",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    }
  ]
}
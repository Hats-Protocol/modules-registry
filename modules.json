{
  "modules": [
    {
      "name": "Agreement Eligibility",
      "details": [
        "A Hats Protocol eligibility module that a community or organization can use to enable individuals to join the community by signing an agreement."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/agreement-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Current Agreement",
          "functionName": "currentAgreement",
          "displayType": "default"
        },
        {
          "label": "Grace Period Ending",
          "functionName": "graceEndsAt",
          "displayType": "timestamp"
        },
        {
          "label": "Owner Hat",
          "functionName": "OWNER_HAT",
          "displayType": "hat"
        },
        {
          "label": "Arbitrator Hat",
          "functionName": "ARBITRATOR_HAT",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xF6bc6Dd30403e6ff5b3Bebead32B8fce1b753aA1",
      "deployments": [
        { "chainId": "11155111", "block": "5279344" },
        { "chainId": "10", "block": "116516227" },
        { "chainId": "42161", "block": "194358596" },
        { "chainId": "100", "block": "33122123" },
        { "chainId": "42220", "block": "24754861" },
        { "chainId": "8453", "block": "12327703" },
        { "chainId": "137", "block": "55094822" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Owner Hat",
            "description": "The hat ID for the owner hat. The wearer(s) of this hat are authorized to update the agreement.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Arbitrator Hat",
            "description": "The hat ID for the arbitrator hat. The wearer(s) of this hat are authorized to set the standing for accounts.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          }
        ],
        "mutable": [
          {
            "name": "Agreement",
            "description": "Initial agreement",
            "type": "string",
            "example": "ipfs://bafybeih2a5ztsooqtx7hb32oayynxoeiplaqd5llcnezzj2srqgmc2k2da",
            "displayType": "default"
          }
        ]
      },
      "customRoles": [
        {
          "id": "agreementOwner",
          "name": "Agreement Owner",
          "criteria": "OWNER_HAT"
        },
        {
          "id": "agreementArbitrator",
          "name": "Agreement Arbitrator",
          "criteria": "ARBITRATOR_HAT"
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "signAgreementAndClaimHat",
          "label": "Sign Agreement and Claim",
          "description": "Sign the current agreement and claim the hat",
          "primary": true,
          "args": [
            {
              "name": "Claims Hatter",
              "description": "A Multi Claims Hatter instance with which to perform claiming",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "signAgreement",
          "label": "Sign Agreement",
          "description": "Sign the current agreement (without claiming the hat)",
          "args": []
        },
        {
          "roles": ["agreementOwner"],
          "functionName": "setAgreement",
          "label": "Set Agreement",
          "description": "Set a new agreement, with a grace period",
          "primary": true,
          "args": [
            {
              "name": "Agreement",
              "description": "The new agreement, as a hash of the agreement plaintext or a link",
              "type": "string",
              "displayType": "default"
            },
            {
              "name": "Grace Period",
              "description": "The new grace period - the time duration for which signers of the existing agreement are still eligible",
              "type": "uint256",
              "displayType": "seconds"
            }
          ]
        },
        {
          "roles": ["agreementArbitrator"],
          "functionName": "revoke",
          "label": "Revoke",
          "description": "Revoke the wearer's hat and place them in bad standing",
          "primary": true,
          "args": [
            {
              "name": "Wearer",
              "description": "The address of the wearer from whom to revoke the hat",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["agreementArbitrator"],
          "functionName": "forgive",
          "label": "Forgive",
          "description": "Forgive the wearer's bad standing, allowing them to claim the hat again",
          "args": [
            {
              "name": "Wearer",
              "description": "The address of the wearer to forgive",
              "type": "address",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AgreementEligibility_NotArbitrator",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "AgreementEligibility_NotOwner",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "agreement",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "grace",
              "type": "uint256"
            }
          ],
          "name": "AgreementEligibility_AgreementSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "agreement",
              "type": "string"
            }
          ],
          "name": "AgreementEligibility_AgreementSigned",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "hatId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "agreement",
              "type": "string"
            }
          ],
          "name": "AgreementEligibility_HatClaimedWithAgreement",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ARBITRATOR_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "OWNER_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "claimer", "type": "address" }
          ],
          "name": "claimerAgreements",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "agreementId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentAgreement",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentAgreementId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" }
          ],
          "name": "forgive",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "graceEndsAt",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" }
          ],
          "name": "revoke",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_agreement",
              "type": "string"
            },
            { "internalType": "uint256", "name": "_grace", "type": "uint256" }
          ],
          "name": "setAgreement",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "signAgreement",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimsHatter",
              "type": "address"
            }
          ],
          "name": "signAgreementAndClaimHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" }
          ],
          "name": "wearerStanding",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Allowlist Eligibility",
      "details": [
        "A Hats Protocol eligibility module that uses an allowlist to determine eligibility.",
        "This module sets up a simple allowlist to determine eligibility for a hat. For a given account (i.e., potential hat wearer), the allowlist stores values for that account's eligibility and standing for the hat. The wearer(s) of the Owner Hat can add or remove accounts from the allowlist. The wearer(s) of the Arbitrator Hat can set the standing of accounts."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/allowlist-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Owner Hat",
          "functionName": "OWNER_HAT",
          "displayType": "hat"
        },
        {
          "label": "Arbitrator Hat",
          "functionName": "ARBITRATOR_HAT",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xaC208e6668DE569C6ea1db76DeCea70430335Ed5",
      "deployments": [
        { "chainId": "5", "block": "9647259" },
        { "chainId": "11155111", "block": "4655298" },
        { "chainId": "10", "block": "109815832" },
        { "chainId": "137", "block": "48560643" },
        { "chainId": "42161", "block": "139432841" },
        { "chainId": "100", "block": "30405602" },
        { "chainId": "42220", "block": "24755507" },
        { "chainId": "8453", "block": "12329333" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Owner Hat",
            "description": "The hat ID for the owner hat. The wearer(s) of this hat are authorized to add and remove accounts from the allowlist.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Arbitrator Hat",
            "description": "The hat ID for the arbitrator hat. The wearer(s) of this hat are authorized to set the standing for accounts.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          }
        ],
        "mutable": [
          {
            "name": "Accounts",
            "description": "Initial accounts for the allowlist.",
            "type": "address[]",
            "example": [
              "0x0000000000000000000000000000000000000001",
              "0x0000000000000000000000000000000000000002"
            ],
            "displayType": "default"
          }
        ]
      },
      "customRoles": [
        {
          "id": "allowListOwner",
          "name": "Allowlist Owner",
          "criteria": "OWNER_HAT"
        },
        {
          "id": "allowListArbitrator",
          "name": "Allowlist Arbitrator",
          "criteria": "ARBITRATOR_HAT"
        }
      ],
      "writeFunctions": [
        {
          "roles": ["allowListOwner"],
          "functionName": "addAccount",
          "label": "Add Account",
          "description": "Add an account to the allowlist",
          "primary": true,
          "args": [
            {
              "name": "Account",
              "description": "The account to add",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListOwner"],
          "functionName": "addAccounts",
          "label": "Add Accounts",
          "description": "Add multiple accounts to the allowlist",
          "args": [
            {
              "name": "Accounts",
              "description": "The accounts to add",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListOwner"],
          "functionName": "removeAccount",
          "label": "Remove Account",
          "description": "Remove an account from the allowlist",
          "args": [
            {
              "name": "Account",
              "description": "The account to remove",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListOwner"],
          "functionName": "removeAccountAndBurnHat",
          "label": "Remove and Burn",
          "description": "Remove an account from the allowlist and burn their hat",
          "args": [
            {
              "name": "Account",
              "description": "The account to remove",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListOwner"],
          "functionName": "removeAccounts",
          "label": "Remove Accounts",
          "description": "Remove multiple accounts from the allowlist",
          "args": [
            {
              "name": "Accounts",
              "description": "Accounts to remove",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListArbitrator"],
          "functionName": "setStandingForAccount",
          "label": "Set Standing",
          "description": "Set the standing for an account",
          "primary": true,
          "args": [
            {
              "name": "Account",
              "description": "The account to set standing for",
              "type": "address",
              "displayType": "default"
            },
            {
              "name": "Standing",
              "description": "The standing to set",
              "type": "bool",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListArbitrator"],
          "functionName": "setBadStandingAndBurnHat",
          "label": "Set Bad Standing and Burn Hat",
          "description": "Puts an account in bad standing and burns their hat",
          "args": [
            {
              "name": "Account",
              "description": "The account to set standing for",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["allowListArbitrator"],
          "functionName": "setStandingForAccounts",
          "label": "Set Standings",
          "description": "Set the standing for multiple accounts",
          "args": [
            {
              "name": "Accounts",
              "description": "Accounts accounts to set standing for",
              "type": "address[]",
              "displayType": "default"
            },
            {
              "name": "Standings",
              "description": "The standings to set for each account, corresponding to the accounts order",
              "type": "bool[]",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AllowlistEligibility_ArrayLengthMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "AllowlistEligibility_NotArbitrator",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "AllowlistEligibility_NotOwner",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "AllowlistEligibility_NotWearer",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "AccountAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "AccountRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "standing",
              "type": "bool"
            }
          ],
          "name": "AccountStandingChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            }
          ],
          "name": "AccountsAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            }
          ],
          "name": "AccountsRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "indexed": false,
              "internalType": "bool[]",
              "name": "standing",
              "type": "bool[]"
            }
          ],
          "name": "AccountsStandingChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ARBITRATOR_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "OWNER_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_account", "type": "address" }
          ],
          "name": "addAccount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            }
          ],
          "name": "addAccounts",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "account", "type": "address" }
          ],
          "name": "allowlist",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "badStanding", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "_eligible", "type": "bool" },
            { "internalType": "bool", "name": "_standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_account", "type": "address" }
          ],
          "name": "removeAccount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_account", "type": "address" }
          ],
          "name": "removeAccountAndBurnHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            }
          ],
          "name": "removeAccounts",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_account", "type": "address" }
          ],
          "name": "setBadStandingAndBurnHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            { "internalType": "bool", "name": "_standing", "type": "bool" }
          ],
          "name": "setStandingForAccount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            },
            { "internalType": "bool[]", "name": "_standing", "type": "bool[]" }
          ],
          "name": "setStandingForAccounts",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Baal Staking Eligibility",
      "details": [
        "An eligibility module which requires wearers of a given hat to stake a minimum amount of Baal voting shares in order to be eligible, and enables others in the Hat tree's organization to slash the stake of a wearer who is behaving badly."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hats-baal-shamans/blob/v0.1.0-staking/src/HatsStakingShaman.sol"
        }
      ],
      "parameters": [
        {
          "label": "Baal Contract",
          "functionName": "BAAL",
          "displayType": "address"
        },
        {
          "label": "Staking Token",
          "functionName": "SHARES_TOKEN",
          "displayType": "erc20"
        },
        {
          "label": "Minimum Stake",
          "functionName": "minStake",
          "displayType": "default"
        },
        {
          "label": "Cooldown Period",
          "functionName": "cooldownPeriod",
          "displayType": "seconds"
        },
        {
          "label": "Judge Hat (Can Set Wearer Standing)",
          "functionName": "judge",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xa1E79f78630F77436C001Af44893A2720180E19F",
      "deployments": [
        { "chainId": "11155111", "block": "6007514" },
        { "chainId": "10", "block": "120717655" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Baal",
            "description": "The Baal contract whose voting shares will be used for staking",
            "type": "address",
            "example": "0xcf4b2e60273da3718fd16ee0d4cb176247ecc28a",
            "displayType": "address"
          },
          {
            "name": "Staking Proxy Implementation",
            "description": "The address of the staking proxy implementation. This enables staked votes to be delegated back to the staker or a delegate of their choice.",
            "type": "address",
            "example": "0x23da8C14c1F40049A5A26Fa41610003b181A4377",
            "displayType": "address"
          }
        ],
        "mutable": [
          {
            "name": "Cooldown Buffer",
            "description": "The number of seconds that must elapse between beginning an unstake and completing it, in addition to the Baal's voting period and grace period",
            "type": "uint32",
            "example": 86400,
            "displayType": "seconds"
          },
          {
            "name": "Judge Hat",
            "description": "The hat that can set wearers' standing, enabling them to be slashed",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Minimum Stake",
            "description": "The minimum stake required to be eligible for the hat",
            "type": "uint112",
            "example": "100",
            "displayType": "amountWithDecimals"
          }
        ]
      },
      "customRoles": [
        {
          "id": "baalStakingJudge",
          "name": "Staking Judge",
          "criteria": "judge"
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "stakeAndClaim",
          "label": "Stake and Claim",
          "description": "Stake tokens for the first time and claim the hat",
          "primary": true,
          "args": [
            {
              "name": "Amount",
              "description": "The amount of tokens to stake",
              "type": "uint112",
              "displayType": "amountWithDecimals"
            },
            {
              "name": "Delegate",
              "description": "The address to delegate staked votes to",
              "type": "address",
              "displayType": "default"
            },
            {
              "name": "Claims Hatter",
              "description": "A Multi Claims Hatter instance with which to perform claiming",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "stake",
          "label": "Stake",
          "description": "Stake tokens, whether for the first time or to increase an existing stake.",
          "primary": false,
          "args": [
            {
              "name": "Amount",
              "description": "The amount of tokens to stake",
              "type": "uint112",
              "displayType": "amountWithDecimals"
            },
            {
              "name": "Delegate",
              "description": "The address to delegate staked votes to",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "beginUnstake",
          "label": "Begin Unstake",
          "description": "Begin the process of unstaking an amount tokens by initiating a cooldown period, after which the tokens can be unstaked if the staker is not slashed in the meantime.",
          "args": [
            {
              "name": "Amount",
              "description": "The amount of tokens to unstake",
              "type": "uint112",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "resetUnstake",
          "label": "Reset Unstake",
          "description": "Reset the unstake process with a new amount to unstake.",
          "args": [
            {
              "name": "New Unstaking Amount",
              "description": "The new amount of tokens to unstake",
              "type": "uint112",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "completeUnstake",
          "label": "Complete Unstake For Account",
          "description": "Complete the process of unstaking for a staker after the cooldown period has elapsed.",
          "args": [
            {
              "name": "Staker",
              "description": "The staker for whom to complete unstaking",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "unstakeFromDeregisteredRole",
          "label": "Unstake From Deregistered Hat",
          "description": "Unstake tokens from a hat that no longer requires staking",
          "primary": false,
          "args": []
        },
        {
          "roles": ["public"],
          "functionName": "delegate",
          "label": "Delegate Votes",
          "description": "Delegate staked votes to a new delegate",
          "primary": false,
          "args": [
            {
              "name": "New Delegate",
              "description": "The address to delegate staked votes to",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "setMinStake",
          "label": "Change Min Stake",
          "description": "Change the minimum stake required to be eligible for the hat",
          "primary": true,
          "args": [
            {
              "name": "Min Stake",
              "description": "The new minimum stake",
              "type": "uint112",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "setJudge",
          "label": "Change Judge Hat",
          "description": "Change the hat that can slash wearers",
          "args": [
            {
              "name": "Hat",
              "description": "The new judge hat",
              "type": "uint256",
              "displayType": "hat"
            }
          ]
        },
        {
          "roles": ["baalStakingJudge"],
          "functionName": "setStanding",
          "label": "Set Wearer Standing",
          "description": "Set a wearer's standing",
          "primary": true,
          "args": [
            {
              "name": "Wearer",
              "description": "The wearer to set the standing of",
              "type": "address",
              "displayType": "default"
            },
            {
              "name": "Standing",
              "description": "The new standing of the wearer",
              "type": "bool",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "name": "CooldownNotEnded", "type": "error" },
        { "inputs": [], "name": "HatImmutable", "type": "error" },
        { "inputs": [], "name": "InsufficientStake", "type": "error" },
        { "inputs": [], "name": "NotAdmin", "type": "error" },
        { "inputs": [], "name": "NotInBadStanding", "type": "error" },
        { "inputs": [], "name": "NotJudge", "type": "error" },
        { "inputs": [], "name": "NotShaman", "type": "error" },
        { "inputs": [], "name": "RoleStillRegistered", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "judge",
              "type": "uint256"
            }
          ],
          "name": "JudgeSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint112",
              "name": "minStake",
              "type": "uint112"
            }
          ],
          "name": "MinStakeSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint112",
              "name": "amount",
              "type": "uint112"
            }
          ],
          "name": "Slashed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint112",
              "name": "amount",
              "type": "uint112"
            }
          ],
          "name": "Staked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint112",
              "name": "amount",
              "type": "uint112"
            }
          ],
          "name": "UnstakeBegun",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint112",
              "name": "amount",
              "type": "uint112"
            }
          ],
          "name": "UnstakeCompleted",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BAAL",
          "outputs": [
            { "internalType": "contract IBaal", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SHARES_TOKEN",
          "outputs": [
            {
              "internalType": "contract IBaalToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "STAKING_PROXY_IMPL",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint112", "name": "_amount", "type": "uint112" }
          ],
          "name": "beginUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract MultiClaimsHatter",
              "name": "_claimsHatter",
              "type": "address"
            }
          ],
          "name": "claim",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" }
          ],
          "name": "completeUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "cooldownBuffer",
          "outputs": [
            { "internalType": "uint32", "name": "", "type": "uint32" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "cooldownPeriod",
          "outputs": [
            { "internalType": "uint32", "name": "", "type": "uint32" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newDelegate",
              "type": "address"
            }
          ],
          "name": "delegate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" }
          ],
          "name": "getStakedSharesAndProxy",
          "outputs": [
            { "internalType": "uint112", "name": "amount", "type": "uint112" },
            {
              "internalType": "address",
              "name": "stakingProxy",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isManagerShaman",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "judge",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" }
          ],
          "name": "memberStakes",
          "outputs": [
            {
              "internalType": "uint112",
              "name": "totalStaked",
              "type": "uint112"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "minStake",
          "outputs": [
            { "internalType": "uint112", "name": "", "type": "uint112" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint112",
              "name": "_newUnstakingAmount",
              "type": "uint112"
            }
          ],
          "name": "resetUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_judge", "type": "uint256" }
          ],
          "name": "setJudge",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint112",
              "name": "_minStake",
              "type": "uint112"
            }
          ],
          "name": "setMinStake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" },
            { "internalType": "bool", "name": "_standing", "type": "bool" }
          ],
          "name": "setStanding",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_member", "type": "address" }
          ],
          "name": "slash",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint112", "name": "_amount", "type": "uint112" },
            {
              "internalType": "address",
              "name": "_delegate",
              "type": "address"
            }
          ],
          "name": "stake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint112", "name": "_amount", "type": "uint112" },
            {
              "internalType": "address",
              "name": "_delegate",
              "type": "address"
            },
            {
              "internalType": "contract MultiClaimsHatter",
              "name": "_claimsHatter",
              "type": "address"
            }
          ],
          "name": "stakeAndClaim",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "member", "type": "address" }
          ],
          "name": "stakes",
          "outputs": [
            {
              "internalType": "uint112",
              "name": "stakedAmount",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "unstakingAmount",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "canUnstakeAfter",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unstakeFromDeregisteredRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Eligibilities Chain",
      "details": [
        "Eligibility module that chains any amount of eligibility modules with 'and' & 'or' logical operations.",
        "Modules are chained in a format of a disjunction of conjunction clauses."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hats-module"
        }
      ],
      "parameters": [
        {
          "label": "Number Of Conjunction Clauses",
          "functionName": "NUM_CONJUNCTION_CLAUSES",
          "displayType": "default"
        },
        {
          "label": "Length Of Each Clause",
          "functionName": "CONJUNCTION_CLAUSE_LENGTHS",
          "displayType": "default"
        },
        {
          "label": "Module Addresses",
          "functionName": "MODULES",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [
        {
          "description": "Indicates that the module is extending the behavior of existing module instances",
          "label": "Meta Module",
          "value": "meta"
        }
      ],
      "implementationAddress": "0x83200f1633cDb6C8f28F202CEA1B6a9105862D83",
      "deployments": [
        { "chainId": "5", "block": "10009615" },
        { "chainId": "10", "block": "111939238" },
        { "chainId": "11155111", "block": "5313413" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Number Of Conjunction Clauses",
            "description": "The number of conjunction clauses",
            "type": "uint256",
            "example": "2",
            "displayType": "default"
          },
          {
            "name": "Clause Lengths",
            "description": "Length of each clause, provided as a list",
            "type": "uint256[]",
            "example": [1, 2],
            "displayType": "default"
          },
          {
            "name": "Modules",
            "description": "The list of module instances to chain together",
            "type": "address[]",
            "example": [
              "0x8a1f28732c984e5a80111bc06115b1302189859d",
              "0x3232a9ab82800ff2ee966d6db5c6152d863bfc66",
              "0xd700dcc4949dfc8fcb3b4246e7137bf759795ca0"
            ],
            "displayType": "default"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "CONJUNCTION_CLAUSE_LENGTHS",
          "outputs": [
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MODULES",
          "outputs": [
            { "internalType": "address[]", "name": "", "type": "address[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "NUM_CONJUNCTION_CLAUSES",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Toggles Chain",
      "details": [
        "Toggle module that chains any amount of toggle modules with 'and' & 'or' logical operations.",
        "Modules are chained in a format of a disjunction of conjunction clauses."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hats-module"
        }
      ],
      "parameters": [
        {
          "label": "Number Of Conjunction Clauses",
          "functionName": "NUM_CONJUNCTION_CLAUSES",
          "displayType": "default"
        },
        {
          "label": "Length Of Each Clause",
          "functionName": "CONJUNCTION_CLAUSE_LENGTHS",
          "displayType": "default"
        },
        {
          "label": "Module Addresses",
          "functionName": "MODULES",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": false, "toggle": true, "hatter": false },
      "tags": [
        {
          "description": "Indicates that the module is extending the behavior of existing module instances",
          "label": "Meta Module",
          "value": "meta"
        }
      ],
      "implementationAddress": "0x2f1388e095BEc051dB9F1B226Faf222ef5c33f16",
      "deployments": [
        { "chainId": "5", "block": "10009649" },
        { "chainId": "11155111", "block": "5313437" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Number Of Conjunction Clauses",
            "description": "The number of conjunction clauses",
            "type": "uint256",
            "example": "1",
            "displayType": "default"
          },
          {
            "name": "Clause Lengths",
            "description": "Length of each clause, provided as a list",
            "type": "uint256[]",
            "example": [2],
            "displayType": "default"
          },
          {
            "name": "Modules",
            "description": "The list of module instances to chain together",
            "type": "address[]",
            "example": [
              "0xe1f50cd1078b4f7920c7d6657dc3d8d2e5155ae0",
              "0x4f28253ece7b52dd800160e7fecdb1c531a3fe1f"
            ],
            "displayType": "default"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "CONJUNCTION_CLAUSE_LENGTHS",
          "outputs": [
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MODULES",
          "outputs": [
            { "internalType": "address[]", "name": "", "type": "address[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "NUM_CONJUNCTION_CLAUSES",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "getHatStatus",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "CharacterSheets Level",
      "details": [
        "A Hats Protocol eligibility module that checks players for CharacterSheets characters with a minimum level for specific classes."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/raid-guild/character-sheets-contracts"
        },
        { "label": "CharacterSheets", "link": "https://charactersheets.io" },
        { "label": "RaidGuild", "link": "https://raidguild.org" }
      ],
      "deployments": [{ "chainId": "100", "block": "31196970" }],
      "parameters": [
        {
          "label": "CharacterSheet",
          "functionName": "SHEETS_ADDRESS",
          "displayType": "address"
        },
        {
          "label": "Classes Token",
          "functionName": "CLASSES_ADDRESS",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xB2Ad134eB41695Ca87a62C7529259dC271d810Ce",
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "CharacterSheets Address",
            "description": "The address for the CharacterSheets game where players have characters.",
            "type": "address",
            "example": "0x083c4e685f64411747548a5ea090630ab0bf17bf",
            "displayType": "default"
          },
          {
            "name": "Classes Address",
            "description": "The address for the Classes token used in the character sheets game",
            "type": "address",
            "example": "0x7e029eFCbD96804B7284a9eEb74f2F5aB5F79a7e",
            "displayType": "token"
          }
        ],
        "mutable": [
          {
            "name": "Class IDs",
            "description": "Initial classes to be included for eligibility",
            "type": "uint256[]",
            "example": [1],
            "displayType": "default"
          },
          {
            "name": "Minimum Levels",
            "description": "Initial levels needed for each class to be included for eligibility",
            "type": "uint256[]",
            "example": [2],
            "displayType": "default"
          }
        ]
      },
      "customRoles": [],
      "writeFunctions": [
        {
          "roles": ["hatAdmins"],
          "functionName": "addClasses",
          "label": "Add Classes",
          "description": "Add classes and their minimum levels",
          "primary": true,
          "args": [
            {
              "name": "Class IDs",
              "description": "Classes to add",
              "type": "uint256[]",
              "displayType": "default"
            },
            {
              "name": "Min Levels",
              "description": "The min levels corrsponding to each new class, in the same order",
              "type": "uint256[]",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "ElderEligibility_HatImmutable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ElderEligibility_NotHatAdmin",
          "type": "error"
        },
        { "inputs": [], "name": "LengthMismatch", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "name": "ClassesAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "ElderEligibilityDeployed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ARRAY_LENGTH",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "CLASSES_ADDRESS",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "SHEETS_ADDRESS",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "_classIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_minLevels",
              "type": "uint256[]"
            }
          ],
          "name": "addClasses",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "classIds",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "minLevels",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "CoLinks Supply Eligibility",
      "details": [
        "Determines eligibility based on the supply of CoLinks links targeting a given account.",
        "An account (i.e. potential hat wearer) is eligible if the current supply of their links meets a configurable threshold., "
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/colinks-eligibility"
        },
        { "label": "CoLinks", "link": "https://colinks.coordinape.com/" }
      ],
      "parameters": [
        {
          "label": "Link Supply Threshold",
          "functionName": "THRESHOLD",
          "displayType": "uint256"
        },
        {
          "label": "CoLinks Contract",
          "functionName": "COLINKS",
          "displayType": "address"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0x64DB769cBC4de73a09BCA715604B27FA8704d3Eb",
      "deployments": [{ "chainId": "10", "block": "114023601" }],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Link Supply Threshold",
            "description": "The minimum supply of an account's links that must exist for the account to be eligible.",
            "type": "uint256",
            "example": "10",
            "displayType": "default",
            "optional": false
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "COLINKS",
          "outputs": [
            {
              "internalType": "contract CoLinksLike",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "THRESHOLD",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Hats Election Eligibility",
      "details": [
        "This module enables organizations to elect wearers of a given hat. More specifically, it makes certain accounts eligible to wear the given hat based on the submitted results of an election.",
        "Election results are valid within a given term, after which the elected wearers become ineligible unless and until new election results are submitted.",
        "This module works with any election mechanism that can output a list of winning addresses, such as onchain DAO proposals or an oSnap proposal."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hats-elections-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Admin Hat ID",
          "functionName": "ADMIN_HAT",
          "displayType": "hat"
        },
        {
          "label": "Ballot Box Hat ID",
          "functionName": "BALLOT_BOX_HAT",
          "displayType": "hat"
        },
        {
          "label": "Current Term End",
          "functionName": "currentTermEnd",
          "displayType": "timestamp"
        },
        {
          "label": "Next Term End",
          "functionName": "nextTermEnd",
          "displayType": "timestamp"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [
        {
          "description": "Indicates that the module is now deprecated",
          "label": "Deprecated",
          "value": "deprecated"
        }
      ],
      "implementationAddress": "0x99081d45920818557203CCD62eD36dC2FaD9a43E",
      "deployments": [{ "chainId": "5", "block": "10038318" }],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Ballot Box Hat",
            "description": "This hat has the authority to submit election and recall results.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Admin Hat",
            "description": "Optional admin hat, granted authority to set up a new term. If not provided (equals zero), then this permission is granted to the admins of the hat.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat",
            "optional": true
          }
        ],
        "mutable": [
          {
            "name": "Current Term End",
            "description": "Timestamp of the second following the end of the current term",
            "type": "uint128",
            "example": "1723155807",
            "displayType": "timestamp"
          }
        ]
      },
      "customRoles": [
        {
          "id": "electionsBallotBox",
          "name": "Elections Ballot Box",
          "criteria": "BALLOT_BOX_HAT"
        },
        {
          "id": "electionsAdmin",
          "name": "Elections Admin",
          "criteria": "ADMIN_HAT",
          "hatAdminsFallback": true
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "startNextTerm",
          "label": "Start Next Term",
          "description": "If the current term has passed and the next term's election is over, then start the next term",
          "primary": true,
          "args": []
        },
        {
          "roles": ["electionsBallotBox"],
          "functionName": "elect",
          "label": "Submit Election Results",
          "description": "Submit the results of an election for a specified term",
          "primary": true,
          "args": [
            {
              "name": "Election's Term End",
              "description": "Term end time of the election",
              "type": "uint128",
              "displayType": "timestamp"
            },
            {
              "name": "Winners",
              "description": "The addresses of the winners of the election",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["electionsBallotBox"],
          "functionName": "recall",
          "label": "Submit Recall Election Results",
          "description": "Submit the results of a recall election for a specified term",
          "args": [
            {
              "name": "Election's Term End",
              "description": "Term end time of the election",
              "type": "uint128",
              "displayType": "timestamp"
            },
            {
              "name": "Recallees",
              "description": "The addresses of the Recalled accounts",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["electionsAdmin"],
          "functionName": "setNextTerm",
          "label": "set Next Term",
          "description": "Set the next term. This will open the election for the next term. If the next term has already been set and is still open, this function can be used to change it.",
          "primary": true,
          "args": [
            {
              "name": "New Term End",
              "description": "The end time of the term that will be opened",
              "type": "uint128",
              "displayType": "timestamp"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" }
          ],
          "name": "ElectionClosed",
          "type": "error"
        },
        { "inputs": [], "name": "InvalidTermEnd", "type": "error" },
        { "inputs": [], "name": "NextTermNotReady", "type": "error" },
        { "inputs": [], "name": "NotAdmin", "type": "error" },
        { "inputs": [], "name": "NotBallotBox", "type": "error" },
        { "inputs": [], "name": "NotElected", "type": "error" },
        { "inputs": [], "name": "TermEnded", "type": "error" },
        { "inputs": [], "name": "TermNotEnded", "type": "error" },
        { "inputs": [], "name": "TooManyWinners", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "termEnd",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "winners",
              "type": "address[]"
            }
          ],
          "name": "ElectionCompleted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "nextTermEnd",
              "type": "uint128"
            }
          ],
          "name": "ElectionOpened",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "termEnd",
              "type": "uint128"
            }
          ],
          "name": "NewTermStarted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            }
          ],
          "name": "Recalled",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ADMIN_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "BALLOT_BOX_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentTermEnd",
          "outputs": [
            { "internalType": "uint128", "name": "", "type": "uint128" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_termEnd",
              "type": "uint128"
            },
            {
              "internalType": "address[]",
              "name": "_winners",
              "type": "address[]"
            }
          ],
          "name": "elect",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" },
            {
              "internalType": "address",
              "name": "candidates",
              "type": "address"
            }
          ],
          "name": "electionResults",
          "outputs": [
            { "internalType": "bool", "name": "elected", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" }
          ],
          "name": "electionStatus",
          "outputs": [
            { "internalType": "bool", "name": "isElectionOpen", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextTermEnd",
          "outputs": [
            { "internalType": "uint128", "name": "", "type": "uint128" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_termEnd",
              "type": "uint128"
            },
            {
              "internalType": "address[]",
              "name": "_recallees",
              "type": "address[]"
            }
          ],
          "name": "recall",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_newTermEnd",
              "type": "uint128"
            }
          ],
          "name": "setNextTerm",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startNextTerm",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "JokeRace Eligibility",
      "details": [
        "By using this module, communities can elect the wearers of a hat through a JokeRace election. More specifically, the eligible wearers are creators of the top voted proposals in the election",
        "The number of winners of an election, and thus the number of possible wearers made eligible through this integration, is configurable. Additionally, a term period can be set, after which the winners will no longer be eligible to wear the hat.",
        "You must have already deployed a JokeRace contest before deploying this Eligibility Module."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/jokerace-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Module Admin Hat ID",
          "functionName": "ADMIN_HAT",
          "displayType": "hat"
        },
        {
          "label": "Contest Address",
          "functionName": "underlyingContest",
          "displayType": "jokerace"
        },
        {
          "label": "Term End",
          "functionName": "termEnd",
          "displayType": "timestamp"
        },
        {
          "label": "Number Of Elected Hat Wearers",
          "functionName": "topK",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [
        {
          "description": "Indicates that the module is now deprecated",
          "label": "Deprecated",
          "value": "deprecated"
        }
      ],
      "implementationAddress": "0x2bb30E1786a656EC6cD81e79EEf1A28607c9AE5A",
      "deployments": [
        { "chainId": "5", "block": "9597388" },
        { "chainId": "11155111", "block": "4655405" },
        { "chainId": "10", "block": "110683218" },
        { "chainId": "137", "block": "48562046" },
        { "chainId": "42161", "block": "139443958" },
        { "chainId": "100", "block": "30406089" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Admin Hat",
            "description": "Optional admin hat, granted a permission to create a new term (reelection). If not provided (equals zero), then this permission is granted to the admins of the hat",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat",
            "optional": true
          }
        ],
        "mutable": [
          {
            "name": "JokeRace Contest",
            "description": "The JokeRace contest that facilitates the election",
            "type": "address",
            "example": "0xd00F6a711522a84C73aED9997Fcf207B41E97311",
            "displayType": "jokerace"
          },
          {
            "name": "Term End",
            "description": "Timestamp of the term ending (in seconds)",
            "type": "uint256",
            "example": "1723155807",
            "displayType": "timestamp"
          },
          {
            "name": "Top K",
            "description": "First K winners of the election will be eligible",
            "type": "uint256",
            "example": "3",
            "displayType": "default"
          }
        ]
      },
      "customRoles": [
        {
          "id": "jokeraceAdmin",
          "name": "JokeRace Admin",
          "criteria": "ADMIN_HAT",
          "hatAdminsFallback": true
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "pullElectionResults",
          "label": "Pull Election Results",
          "description": "Pulls the election's final results",
          "primary": true,
          "args": []
        },
        {
          "roles": ["jokeraceAdmin"],
          "functionName": "reelection",
          "label": "New Term",
          "description": "Setup a new term, once the current term has ended",
          "primary": true,
          "args": [
            {
              "name": "Election",
              "description": "Address of the new JokeRace election",
              "type": "address",
              "displayType": "jokerace"
            },
            {
              "name": "Term End",
              "description": "Timestamp of the new term ending",
              "type": "uint256",
              "displayType": "timestamp"
            },
            {
              "name": "Top K",
              "description": "Amount of election winners",
              "type": "uint256",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_ContestNotCompleted",
          "type": "error"
        },
        { "inputs": [], "name": "JokeraceEligibility_NoTies", "type": "error" },
        {
          "inputs": [],
          "name": "JokeraceEligibility_NotAdmin",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_TermNotCompleted",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "NewContest",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTopK",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTermEnd",
              "type": "uint256"
            }
          ],
          "name": "NewTerm",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ADMIN_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "wearer", "type": "address" },
            { "internalType": "address", "name": "contest", "type": "address" }
          ],
          "name": "eligibleWearersPerContest",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pullElectionResults",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newUnderlyingContest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newTermEnd",
              "type": "uint256"
            },
            { "internalType": "uint256", "name": "newTopK", "type": "uint256" }
          ],
          "name": "reelection",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "reelectionAllowed",
          "outputs": [
            { "internalType": "bool", "name": "allowed", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "termEnd",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "topK",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "underlyingContest",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "ERC1155 Eligibility",
      "details": [
        "A Hats Protocol eligibility module that checks if an address holds at least one minimum balance of a set of ERC1155 token Ids to determine eligibility"
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/pumpedlunch/HatsEligibilityModules"
        }
      ],
      "parameters": [
        {
          "label": "Token Address",
          "functionName": "TOKEN_ADDRESS",
          "displayType": "erc1155"
        },
        {
          "label": "Token IDs",
          "functionName": "TOKEN_IDS",
          "displayType": "default"
        },
        {
          "label": "Minimum Balances",
          "functionName": "MIN_BALANCES",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0x0089FbD2e0c42F2090890e1d9A3bd8d40E0e2e17",
      "deployments": [
        { "chainId": "5", "block": "9608205" },
        { "chainId": "11155111", "block": "4655335" },
        { "chainId": "1", "block": "18936373" },
        { "chainId": "10", "block": "110684714" },
        { "chainId": "137", "block": "48563371" },
        { "chainId": "42161", "block": "139454273" },
        { "chainId": "100", "block": "30405871" },
        { "chainId": "424", "block": "6051886" },
        { "chainId": "8453", "block": "7556151" },
        { "chainId": "42220", "block": "22842397" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "ERC1155 Contract Address",
            "description": "ERC1155 contract address",
            "type": "address",
            "example": "0x72b51ba24452Cd5b5443B7d6725755E4d77C04e5",
            "displayType": "token"
          },
          {
            "name": "Number Of Tokens",
            "description": "Number of token IDs in the set of tokens that allow eligiblity",
            "type": "uint256",
            "example": "2",
            "displayType": "default"
          },
          {
            "name": "Token IDs",
            "description": "The token IDs within the ERC1155 contract that allow eligibilty",
            "type": "uint256[]",
            "example": ["1", "2"],
            "displayType": "default"
          },
          {
            "name": "Minimum Balances",
            "description": "The minimum balances required (for token ID in the corresponding index) for eligibility",
            "type": "uint256[]",
            "example": ["100", "500"],
            "displayType": "default"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "name": "AlreadyInitialized", "type": "error" },
        { "inputs": [], "name": "NotInitializing", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ARRAY_LENGTH",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_BALANCES",
          "outputs": [
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "TOKEN_ADDRESS",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "TOKEN_IDS",
          "outputs": [
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "ERC20 Eligibility",
      "details": [
        "A Hats Protocol eligibility module that checks if an address owns a minimum balance of an ERC20 token to determine eligibility"
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/pumpedlunch/HatsEligibilityModules"
        }
      ],
      "parameters": [
        {
          "label": "Token Address",
          "functionName": "ERC20_TOKEN_ADDRESS",
          "displayType": "erc20"
        },
        {
          "label": "Minimum Balance",
          "functionName": "MIN_BALANCE",
          "displayType": "amountWithDecimals"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xbA5b218e6685D0607139c06f81442681a32a0EC3",
      "deployments": [
        { "chainId": "5", "block": "9611056" },
        { "chainId": "11155111", "block": "4655367" },
        { "chainId": "1", "block": "18936346" },
        { "chainId": "10", "block": "110684393" },
        { "chainId": "137", "block": "48563085" },
        { "chainId": "42161", "block": "139452101" },
        { "chainId": "100", "block": "30405925" },
        { "chainId": "424", "block": "6052075" },
        { "chainId": "8453", "block": "7577516" },
        { "chainId": "42220", "block": "22842287" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Token Address",
            "description": "ERC20 token address",
            "type": "address",
            "example": "0x1d256A1154382921067d4B17CA52209f2d3bE106",
            "displayType": "erc20"
          },
          {
            "name": "Minimum Balance",
            "description": "Minimum amount of tokens in order to be eligible",
            "type": "uint256",
            "example": "500",
            "displayType": "amountWithDecimals"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "name": "AlreadyInitialized", "type": "error" },
        { "inputs": [], "name": "NotInitializing", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ERC20_TOKEN_ADDRESS",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_BALANCE",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "ERC721 Eligibility",
      "details": [
        "A Hats Protocol eligibility module that checks if an address owns a minimum balance of an ERC721 token to determine eligibility"
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/pumpedlunch/HatsEligibilityModules"
        }
      ],
      "parameters": [
        {
          "label": "Token Address",
          "functionName": "ERC721_TOKEN_ADDRESS",
          "displayType": "erc721"
        },
        {
          "label": "Minimum Balance",
          "functionName": "MIN_BALANCE",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xF37cf12fB4493D29270806e826fDDf50dd722bab",
      "deployments": [
        { "chainId": "5", "block": "9611065" },
        { "chainId": "11155111", "block": "4655346" },
        { "chainId": "1", "block": "18936352" },
        { "chainId": "10", "block": "110684542" },
        { "chainId": "137", "block": "48563224" },
        { "chainId": "42161", "block": "139452888" },
        { "chainId": "100", "block": "30405902" },
        { "chainId": "424", "block": "6052014" },
        { "chainId": "8453", "block": "7556195" },
        { "chainId": "42220", "block": "22842339" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Token Address",
            "description": "ERC721 token address",
            "type": "address",
            "example": "0x72b51ba24452Cd5b5443B7d6725755E4d77C04e5",
            "displayType": "token"
          },
          {
            "name": "Minimum Balance",
            "description": "Minimum amount of tokens in order to be eligible",
            "type": "uint256",
            "example": "500",
            "displayType": "default"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "name": "AlreadyInitialized", "type": "error" },
        { "inputs": [], "name": "NotInitializing", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ERC721_TOKEN_ADDRESS",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_BALANCE",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Gitcoin Passport Eligibility",
      "details": [
        "An eligibility module requiring that hat wearers have a Gitcoin Passport score over a configurable threshold"
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/daocoa/gitcoin-passport-eligibility/"
        }
      ],
      "parameters": [
        {
          "label": "Gitcoin Passport Decoder",
          "functionName": "gitcoinPassportDecoder",
          "displayType": "default"
        },
        {
          "label": "Score Criterion",
          "functionName": "scoreCriterion",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xD9FB39d25E714908ACDA64164a3488d83B6FD3a3",
      "deployments": [{ "chainId": "10", "block": "119896172" }],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Gitcoin Passport Decoder",
            "description": "The address of the Gitcoin Passport Decoder contract, from which Passport scores are retrieved. You can find the latest deployment here: https://github.com/gitcoinco/passport/blob/main/deployments/onchainInfo.json",
            "type": "address",
            "example": "0xe53C60F8069C2f0c3a84F9B3DB5cf56f3100ba56",
            "displayType": "default"
          },
          {
            "name": "Score Criterion",
            "description": "Minimum threshold of passport to be considered eligible.",
            "type": "uint256",
            "example": "10",
            "displayType": { "type": "amountWithDecimals", "decimals": "4" }
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "gitcoinPassportDecoder",
          "outputs": [
            {
              "internalType": "contract IGitcoinPassportDecoder",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "wearer", "type": "address" }
          ],
          "name": "isHuman",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "scoreCriterion",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Hat Wearing Eligibility",
      "details": [
        "A Hats Protocol eligibility module that conditions eligibility for one hat based on wearing another hat.",
        "One use of a hat is to serve as an encapsulation of a set of logic and conditions that serve as baseline eligibility criteria for other hats. This eligibility module builds on that idea by allowing a hat to be used as an eligibility criterion for another hat."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hat-wearing-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Hat To Wear",
          "functionName": "CRITERION_HAT",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xa2e614CE4FAaD60e266127F4006b812d69977265",
      "deployments": [
        { "chainId": "5", "block": "9719807" },
        { "chainId": "11155111", "block": "4655381" },
        { "chainId": "1", "block": "18936188" },
        { "chainId": "10", "block": "109769331" },
        { "chainId": "137", "block": "48562276" },
        { "chainId": "42161", "block": "139445749" },
        { "chainId": "100", "block": "30406067" },
        { "chainId": "424", "block": "6051557" },
        { "chainId": "8453", "block": "7577549" },
        { "chainId": "42220", "block": "22842434" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Criterion Hat",
            "description": "The ID of the hat which users will be required to wear in order to be eligible.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          }
        ],
        "mutable": []
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "CRITERION_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Hats Election Eligibility",
      "details": [
        "This module enables organizations to elect wearers of a given hat. More specifically, it makes certain accounts eligible to wear the given hat based on the submitted results of an election.",
        "Election results are valid within a given term, after which the elected wearers become ineligible unless and until new election results are submitted.",
        "This module works with any election mechanism that can output a list of winning addresses, such as onchain DAO proposals or an oSnap proposal."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/hats-elections-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Admin Hat ID",
          "functionName": "ADMIN_HAT",
          "displayType": "hat"
        },
        {
          "label": "Ballot Box Hat ID",
          "functionName": "BALLOT_BOX_HAT",
          "displayType": "hat"
        },
        {
          "label": "Current Term End",
          "functionName": "currentTermEnd",
          "displayType": "timestamp"
        },
        {
          "label": "Next Term End",
          "functionName": "nextTermEnd",
          "displayType": "timestamp"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xd3b916a8F0C4f9D1d5B6Af29c3C012dbd4f3149E",
      "deployments": [
        { "chainId": "5", "block": "10430387" },
        { "chainId": "11155111", "block": "5150097" },
        { "chainId": "1", "block": "19086145" },
        { "chainId": "10", "block": "117924894" },
        { "chainId": "137", "block": "55096864" },
        { "chainId": "42161", "block": "194372056" },
        { "chainId": "100", "block": "33122902" },
        { "chainId": "8453", "block": "12329679" },
        { "chainId": "42220", "block": "24755686" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Ballot Box Hat",
            "description": "This hat has the authority to submit election and recall results.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Admin Hat",
            "description": "Optional admin hat, granted authority to set up a new term. If not provided (equals zero), then this permission is granted to the admins of the hat.",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat",
            "optional": true
          }
        ],
        "mutable": [
          {
            "name": "Current Term End",
            "description": "Timestamp of the second following the end of the current term",
            "type": "uint128",
            "example": "1723155807",
            "displayType": "timestamp"
          }
        ]
      },
      "customRoles": [
        {
          "id": "electionsBallotBox",
          "name": "Elections Ballot Box",
          "criteria": "BALLOT_BOX_HAT"
        },
        {
          "id": "electionsAdmin",
          "name": "Elections Admin",
          "criteria": "ADMIN_HAT",
          "hatAdminsFallback": true
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "startNextTerm",
          "label": "Start Next Term",
          "description": "If the current term has passed and the next term's election is over, then start the next term",
          "primary": true,
          "args": []
        },
        {
          "roles": ["electionsBallotBox"],
          "functionName": "elect",
          "label": "Submit Election Results",
          "description": "Submit the results of an election for a specified term",
          "primary": true,
          "args": [
            {
              "name": "Election's Term End",
              "description": "Term end time of the election",
              "type": "uint128",
              "displayType": "timestamp"
            },
            {
              "name": "Winners",
              "description": "The addresses of the winners of the election",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["electionsBallotBox"],
          "functionName": "recall",
          "label": "Submit Recall Election Results",
          "description": "Submit the results of a recall election for a specified term",
          "args": [
            {
              "name": "Election's Term End",
              "description": "Term end time of the election",
              "type": "uint128",
              "displayType": "timestamp"
            },
            {
              "name": "Recallees",
              "description": "The addresses of the Recalled accounts",
              "type": "address[]",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["electionsAdmin"],
          "functionName": "setNextTerm",
          "label": "set Next Term",
          "description": "Set the next term. This will open the election for the next term. If the next term has already been set and is still open, this function can be used to change it.",
          "primary": true,
          "args": [
            {
              "name": "New Term End",
              "description": "The end time of the term that will be opened",
              "type": "uint128",
              "displayType": "timestamp"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" }
          ],
          "name": "ElectionClosed",
          "type": "error"
        },
        { "inputs": [], "name": "InvalidTermEnd", "type": "error" },
        { "inputs": [], "name": "NextTermNotReady", "type": "error" },
        { "inputs": [], "name": "NotAdmin", "type": "error" },
        { "inputs": [], "name": "NotBallotBox", "type": "error" },
        { "inputs": [], "name": "NotElected", "type": "error" },
        { "inputs": [], "name": "TermEnded", "type": "error" },
        { "inputs": [], "name": "TermNotEnded", "type": "error" },
        { "inputs": [], "name": "TooManyWinners", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "termEnd",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "winners",
              "type": "address[]"
            }
          ],
          "name": "ElectionCompleted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "nextTermEnd",
              "type": "uint128"
            }
          ],
          "name": "ElectionOpened",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "termEnd",
              "type": "uint128"
            }
          ],
          "name": "NewTermStarted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "termEnd",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            }
          ],
          "name": "Recalled",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ADMIN_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "BALLOT_BOX_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentTermEnd",
          "outputs": [
            { "internalType": "uint128", "name": "", "type": "uint128" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_termEnd",
              "type": "uint128"
            },
            {
              "internalType": "address[]",
              "name": "_winners",
              "type": "address[]"
            }
          ],
          "name": "elect",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" },
            {
              "internalType": "address",
              "name": "candidates",
              "type": "address"
            }
          ],
          "name": "electionResults",
          "outputs": [
            { "internalType": "bool", "name": "elected", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint128", "name": "termEnd", "type": "uint128" }
          ],
          "name": "electionStatus",
          "outputs": [
            { "internalType": "bool", "name": "isElectionOpen", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextTermEnd",
          "outputs": [
            { "internalType": "uint128", "name": "", "type": "uint128" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_termEnd",
              "type": "uint128"
            },
            {
              "internalType": "address[]",
              "name": "_recallees",
              "type": "address[]"
            }
          ],
          "name": "recall",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "_newTermEnd",
              "type": "uint128"
            }
          ],
          "name": "setNextTerm",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startNextTerm",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "JokeRace Eligibility",
      "details": [
        "By using this module, communities can elect the wearers of a hat through a JokeRace election. More specifically, the eligible wearers are creators of the top voted proposals in the election",
        "The number of winners of an election, and thus the number of possible wearers made eligible through this integration, is configurable. Additionally, a term period can be set, after which the winners will no longer be eligible to wear the hat.",
        "You must have already deployed a JokeRace contest before deploying this Eligibility Module.",
        "NOTE: proposals ranking is currently only supported in Jokerace contests with down-voting disabled, and so this module only works with down-voting disabled contests."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/jokerace-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Module Admin Hat ID",
          "functionName": "ADMIN_HAT",
          "displayType": "hat"
        },
        {
          "label": "Contest Address",
          "functionName": "underlyingContest",
          "displayType": "jokerace"
        },
        {
          "label": "Term End",
          "functionName": "termEnd",
          "displayType": "timestamp"
        },
        {
          "label": "Number Of Elected Hat Wearers",
          "functionName": "topK",
          "displayType": "default"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0xAE0e56A0c509dA713722c1aFFcF4B5f1C6CDc73a",
      "deployments": [
        { "chainId": "5", "block": "10092827" },
        { "chainId": "11155111", "block": "4749517" },
        { "chainId": "10", "block": "112566278" },
        { "chainId": "137", "block": "50286793" },
        { "chainId": "42161", "block": "153224468" },
        { "chainId": "100", "block": "31089668" },
        { "chainId": "8453", "block": "12329992" },
        { "chainId": "42220", "block": "24755770" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Admin Hat",
            "description": "Optional admin hat, granted a permission to create a new term (reelection). If not provided (equals zero), then this permission is granted to the admins of the hat",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat",
            "optional": true
          }
        ],
        "mutable": [
          {
            "name": "JokeRace Contest",
            "description": "The JokeRace contest that facilitates the election",
            "type": "address",
            "example": "0x8E612AD3CD04981A69e8ad532b5c20466e3Af5E0",
            "displayType": "jokerace"
          },
          {
            "name": "Term End",
            "description": "Timestamp of the term ending (in seconds)",
            "type": "uint256",
            "example": "1723155807",
            "displayType": "timestamp"
          },
          {
            "name": "Top K",
            "description": "First K winners of the election will be eligible",
            "type": "uint256",
            "example": "3",
            "displayType": "default"
          }
        ]
      },
      "customRoles": [
        {
          "id": "jokeraceAdmin",
          "name": "JokeRace Admin",
          "criteria": "ADMIN_HAT",
          "hatAdminsFallback": true
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "pullElectionResults",
          "label": "Pull Election Results",
          "description": "Pulls the election's final results",
          "primary": true,
          "args": []
        },
        {
          "roles": ["jokeraceAdmin"],
          "functionName": "reelection",
          "label": "New Term",
          "description": "Setup a new term, once the current term has ended",
          "primary": true,
          "args": [
            {
              "name": "Election",
              "description": "Address of the new JokeRace election",
              "type": "address",
              "displayType": "jokerace"
            },
            {
              "name": "Term End",
              "description": "Timestamp of the new term ending",
              "type": "uint256",
              "displayType": "timestamp"
            },
            {
              "name": "Top K",
              "description": "Amount of election winners",
              "type": "uint256",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_ContestNotCompleted",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_MustHaveDownvotingDisabled",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_MustHaveSortingEnabled",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_NotAdmin",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JokeraceEligibility_TermNotCompleted",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "NewContest",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTopK",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTermEnd",
              "type": "uint256"
            }
          ],
          "name": "NewTerm",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "ADMIN_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "wearer", "type": "address" },
            { "internalType": "address", "name": "contest", "type": "address" }
          ],
          "name": "eligibleWearersPerContest",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pullElectionResults",
          "outputs": [
            { "internalType": "bool", "name": "success", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newUnderlyingContest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newTermEnd",
              "type": "uint256"
            },
            { "internalType": "uint256", "name": "newTopK", "type": "uint256" }
          ],
          "name": "reelection",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "reelectionAllowed",
          "outputs": [
            { "internalType": "bool", "name": "allowed", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "termEnd",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "topK",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "underlyingContest",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Multi Claims Hatter",
      "details": [
        "A Hats Protocol hatter contract enabling explicitly eligible wearers to claim a hat."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/multi-claims-hatter"
        }
      ],
      "parameters": [],
      "type": { "eligibility": false, "toggle": false, "hatter": true },
      "tags": [],
      "implementationAddress": "0xB985eA1be961f7c4A4C45504444C02c88c4fdEF9",
      "deployments": [
        { "chainId": "5", "block": "9797988" },
        { "chainId": "11155111", "block": "4655431" },
        { "chainId": "1", "block": "18265713" },
        { "chainId": "10", "block": "110337588" },
        { "chainId": "137", "block": "48249349" },
        { "chainId": "42161", "block": "136869560" },
        { "chainId": "100", "block": "30266574" },
        { "chainId": "424", "block": "5531500" },
        { "chainId": "8453", "block": "7577706" },
        { "chainId": "42220", "block": "22586368" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [],
        "mutable": [
          {
            "name": "Initial Claimable Hats",
            "description": "The ID of the hats to set claimability for",
            "type": "uint256[]",
            "example": [
              "26959946667150639794667015087019630673637144422540572481103610249216"
            ],
            "displayType": "hat"
          },
          {
            "name": "Initial Claimability Types",
            "description": "'1' to make a hat claimable by its wearers, '2' to make a hat also claimable on behalf of wearers",
            "type": "uint8[]",
            "example": [1],
            "displayType": "default"
          }
        ]
      },
      "customRoles": [],
      "writeFunctions": [],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "MultiClaimsHatter_ArrayLengthMismatch",
          "type": "error"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "hatId", "type": "uint256" }
          ],
          "name": "MultiClaimsHatter_HatNotClaimable",
          "type": "error"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "hatId", "type": "uint256" }
          ],
          "name": "MultiClaimsHatter_HatNotClaimableFor",
          "type": "error"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "account", "type": "address" },
            { "internalType": "uint256", "name": "hatId", "type": "uint256" }
          ],
          "name": "MultiClaimsHatter_NotAdminOfHat",
          "type": "error"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "account", "type": "address" },
            { "internalType": "uint256", "name": "hatId", "type": "uint256" }
          ],
          "name": "MultiClaimsHatter_NotExplicitlyEligible",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "hatId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "enum MultiClaimsHatter.ClaimType",
              "name": "claimType",
              "type": "uint8"
            }
          ],
          "name": "HatClaimabilitySet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "hatIds",
              "type": "uint256[]"
            },
            {
              "indexed": false,
              "internalType": "enum MultiClaimsHatter.ClaimType[]",
              "name": "claimTypes",
              "type": "uint8[]"
            }
          ],
          "name": "HatsClaimabilitySet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "accountCanClaim",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "canClaimForAccount",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "claimHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" },
            { "internalType": "address", "name": "_account", "type": "address" }
          ],
          "name": "claimHatFor",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "_hatIds",
              "type": "uint256[]"
            }
          ],
          "name": "claimHats",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "_hatIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            }
          ],
          "name": "claimHatsFor",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "hatExists",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "hatId", "type": "uint256" }
          ],
          "name": "hatToClaimType",
          "outputs": [
            {
              "internalType": "enum MultiClaimsHatter.ClaimType",
              "name": "claimType",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "isClaimableBy",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "isClaimableFor",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" },
            {
              "internalType": "enum MultiClaimsHatter.ClaimType",
              "name": "_claimType",
              "type": "uint8"
            }
          ],
          "name": "setHatClaimability",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract HatsModuleFactory",
              "name": "_factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_implementation",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_moduleHatId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_otherImmutableArgs",
              "type": "bytes"
            },
            { "internalType": "bytes", "name": "_initData", "type": "bytes" },
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" },
            {
              "internalType": "enum MultiClaimsHatter.ClaimType",
              "name": "_claimType",
              "type": "uint8"
            }
          ],
          "name": "setHatClaimabilityAndCreateModule",
          "outputs": [
            {
              "internalType": "address",
              "name": "_instance",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "_hatIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum MultiClaimsHatter.ClaimType[]",
              "name": "_claimTypes",
              "type": "uint8[]"
            }
          ],
          "name": "setHatsClaimability",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract HatsModuleFactory",
              "name": "_factory",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "_implementations",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_moduleHatIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "_otherImmutableArgsArray",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes[]",
              "name": "_initDataArray",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_hatIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum MultiClaimsHatter.ClaimType[]",
              "name": "_claimTypes",
              "type": "uint8[]"
            }
          ],
          "name": "setHatsClaimabilityAndCreateModules",
          "outputs": [
            { "internalType": "bool", "name": "success", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" }
          ],
          "name": "wearsAdmin",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Passthrough Module",
      "details": [
        "A Hats Protocol module that enables an authorized hat to serve as the eligibility and/or toggle module for other hat(s).",
        "Passthrough Module is a contract that can be set as the eligibility and/or toggle module for a target hat, and allows the wearer(s) of another hat to call the eligibility and/or toggle functions of this hat. This allows hats themselves to be used as eligibility and toggle modules."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/passthrough-modules"
        }
      ],
      "parameters": [
        {
          "label": "Eligibility/Toggle Hat",
          "functionName": "CRITERION_HAT",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": true, "hatter": false },
      "tags": [],
      "implementationAddress": "0x050079a8fbFCE76818C62481BA015b89567D2d35",
      "deployments": [
        { "chainId": "5", "block": "9838324" },
        { "chainId": "11155111", "block": "4655455" },
        { "chainId": "1", "block": "18936176" },
        { "chainId": "10", "block": "110683684" },
        { "chainId": "137", "block": "48562453" },
        { "chainId": "42161", "block": "139447326" },
        { "chainId": "100", "block": "30406116" },
        { "chainId": "424", "block": "6051770" },
        { "chainId": "8453", "block": "7577577" },
        { "chainId": "42220", "block": "22842477" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Criterion Token",
            "description": "The hat that will serve as an eligibility and/or toggle module",
            "type": "uint256",
            "example": "53919893334301279589334030174039261347274288845081144962207220498432",
            "displayType": "hat"
          }
        ],
        "mutable": []
      },
      "customRoles": [
        {
          "id": "eligibilityTogglePassthrough",
          "name": "Eligibility/Toggle Passthrough",
          "criteria": "CRITERION_HAT"
        }
      ],
      "writeFunctions": [
        {
          "roles": ["eligibilityTogglePassthrough"],
          "functionName": "setHatWearerStatus",
          "label": "Set Wearer's Status",
          "description": "Set the eligibility and standing of a chosen hat wearer",
          "primary": true,
          "args": [
            {
              "name": "Hat",
              "description": "ID of the hat to set the eligibility status for",
              "type": "uint256",
              "displayType": "hat"
            },
            {
              "name": "Wearer",
              "description": "The address to set the eligibility status for",
              "type": "address",
              "displayType": "default"
            },
            {
              "name": "Eligibility",
              "description": "Is the wearer eligible for the hat",
              "type": "bool",
              "displayType": "default"
            },
            {
              "name": "Standing",
              "description": "Is the wearer in good standing for the hat",
              "type": "bool",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["eligibilityTogglePassthrough"],
          "functionName": "setHatStatus",
          "label": "Set Hat's Status",
          "description": "Set the status of a chosen hat",
          "args": [
            {
              "name": "Hat",
              "description": "ID of the hat to set the status for",
              "type": "uint256",
              "displayType": "hat"
            },
            {
              "name": "Status",
              "description": "Is the hat active",
              "type": "bool",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "name": "NotAuthorized", "type": "error" },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "CRITERION_HAT",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" },
            { "internalType": "bool", "name": "_newStatus", "type": "bool" }
          ],
          "name": "setHatStatus",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "_hatId", "type": "uint256" },
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "bool", "name": "_eligible", "type": "bool" },
            { "internalType": "bool", "name": "_standing", "type": "bool" }
          ],
          "name": "setHatWearerStatus",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Season Toggle",
      "details": [
        "A Hats Protocol toggle module that allows an organization to configure certain hats to be automatically toggled off after a given interval, i.e. a 'season'.",
        "In Hats Protocol, hats can be configured with Toggle modules that programmatically control whether and when the hat is active or inactive. Season Toggle adds an automatic expiry for a group of hats within a given branch of an organization's hat tree, unless an admin of that branch explicitly extends it to a new season."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/season-toggle"
        }
      ],
      "parameters": [
        {
          "label": "Season End",
          "functionName": "seasonEnd",
          "displayType": "timestamp"
        },
        {
          "label": "Season Duration (Current Season Length)",
          "functionName": "seasonDuration",
          "displayType": "seconds"
        }
      ],
      "type": { "eligibility": false, "toggle": true, "hatter": false },
      "tags": [],
      "implementationAddress": "0xFb6bD2e96B123d0854064823f6cb59420A285C00",
      "deployments": [
        { "chainId": "5", "block": "9597342" },
        { "chainId": "11155111", "block": "4655503" },
        { "chainId": "10", "block": "110683928" },
        { "chainId": "137", "block": "48562673" },
        { "chainId": "42161", "block": "139448916" },
        { "chainId": "100", "block": "30406143" },
        { "chainId": "8453", "block": "12330237" },
        { "chainId": "42220", "block": "24755867" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [],
        "mutable": [
          {
            "name": "Season Duration",
            "description": "The length of the season, in seconds. Must be larger than 1 hour",
            "type": "uint256",
            "example": "2592000",
            "displayType": "seconds"
          },
          {
            "name": "Extension Delay",
            "description": "The proportion of the season that must elapse before the branch can be extended for another season, The value is treated as the numerator `x` in the expression `x / 10,000`",
            "type": "uint256",
            "example": "5000",
            "displayType": "default"
          }
        ]
      },
      "customRoles": [],
      "writeFunctions": [
        {
          "roles": ["hatAdmins"],
          "functionName": "extend",
          "label": "New Season",
          "description": "Extend the branch for a new season, optionally with a new season duration",
          "primary": true,
          "args": [
            {
              "name": "Duration",
              "description": "Optional new custom season duration, in seconds",
              "type": "uint256",
              "displayType": "seconds"
            },
            {
              "name": "Extension Delay",
              "description": "Optional new proportion of the season that must elapse before the branch can be extended for another season, The value is treated as the numerator `x` in the expression `x / 10,000`",
              "type": "uint256",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "__version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "SeasonToggle_InvalidExtensionDelay",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SeasonToggle_NotBranchAdmin",
          "type": "error"
        },
        { "inputs": [], "name": "SeasonToggle_NotExtendable", "type": "error" },
        {
          "inputs": [],
          "name": "SeasonToggle_SeasonDurationTooShort",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_branchRoot",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_extensionDelay",
              "type": "uint256"
            }
          ],
          "name": "Extended",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_SEASON_DURATION",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_extensionDelay",
              "type": "uint256"
            }
          ],
          "name": "extend",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "extendable",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "extensionDelay",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "extensionThreshold",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getHatStatus",
          "outputs": [
            { "internalType": "bool", "name": "_active", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "seasonDuration",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "seasonEnd",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ]
    },
    {
      "name": "Staking Eligibility",
      "details": [
        "A Hats Protocol eligibility module which requires wearers of a given hat to stake a minimum amount of a specified token in order to be eligible, and enables others in the Hat tree's organization to slash the stake of a wearer who is behaving badly."
      ],
      "links": [
        {
          "label": "GitHub",
          "link": "https://github.com/Hats-Protocol/staking-eligibility"
        }
      ],
      "parameters": [
        {
          "label": "Staking Token",
          "functionName": "TOKEN",
          "displayType": "erc20"
        },
        {
          "label": "Minimum Stake",
          "functionName": "minStake",
          "displayType": "amountWithDecimals"
        },
        {
          "label": "Judge Hat (Can Slash Wearers)",
          "functionName": "judgeHat",
          "displayType": "hat"
        },
        {
          "label": "Recipient Hat (Can Withdraw Slashed Stakes)",
          "functionName": "recipientHat",
          "displayType": "hat"
        }
      ],
      "type": { "eligibility": true, "toggle": false, "hatter": false },
      "tags": [],
      "implementationAddress": "0x9E01030aF633Be5a439DF122F2eEf750b44B8aC7",
      "deployments": [
        { "chainId": "5", "block": "9597271" },
        { "chainId": "11155111", "block": "4655531" },
        { "chainId": "10", "block": "110684134" },
        { "chainId": "137", "block": "48562856" },
        { "chainId": "42161", "block": "139450291" },
        { "chainId": "100", "block": "30406165" },
        { "chainId": "8453", "block": "12330400" },
        { "chainId": "42220", "block": "24755933" }
      ],
      "creationArgs": {
        "useHatId": true,
        "immutable": [
          {
            "name": "Staking Token",
            "description": "ERC-20 Token which will be used for staking",
            "type": "address",
            "example": "0x1d256A1154382921067d4B17CA52209f2d3bE106",
            "displayType": "token"
          }
        ],
        "mutable": [
          {
            "name": "Minimum Stake",
            "description": "The minimum stake required to be eligible for the hat",
            "type": "uint256",
            "example": "100",
            "displayType": "amountWithDecimals"
          },
          {
            "name": "Judge Hat",
            "description": "The hat that can slash wearers",
            "type": "uint256",
            "example": "26959946667150639794667015087019630673637144422540572481103610249216",
            "displayType": "hat"
          },
          {
            "name": "Recipient Hat",
            "description": "The hat that can withdraw slashed stakes",
            "type": "uint256",
            "example": "53919893334301279589334030174039261347274288845081144962207220498432",
            "displayType": "hat"
          },
          {
            "name": "Cooldown Period",
            "description": "The number of seconds that must elapse between beginning an unstake and completing it. This should be set long enough to give a wearer of the judge hat enough time to slash a misbehaving staker before they can unstake",
            "type": "uint256",
            "example": "86400",
            "displayType": "seconds"
          }
        ]
      },
      "customRoles": [
        {
          "id": "stakingJudge",
          "name": "Staking Judge",
          "criteria": "judgeHat"
        },
        {
          "id": "stakingRecipient",
          "name": "Staking Recipient",
          "criteria": "recipientHat"
        }
      ],
      "writeFunctions": [
        {
          "roles": ["public"],
          "functionName": "stake",
          "label": "Stake",
          "description": "Stake tokens, whether for the first time or to increase an existing stake.",
          "primary": true,
          "args": [
            {
              "name": "Amount",
              "description": "The amount of tokens to stake",
              "type": "uint248",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "beginUnstake",
          "label": "Begin Unstake",
          "description": "Begin the process of unstaking an amount tokens by initiating a cooldown period, after which the tokens can be unstaked if the skater is not slashed in the meantime.",
          "args": [
            {
              "name": "Amount",
              "description": "The amount of tokens to unstake",
              "type": "uint248",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "completeUnstake",
          "label": "Complete Unstake For Account",
          "description": "Complete the process of unstaking for a staker after the cooldown period has elapsed.",
          "args": [
            {
              "name": "Staker",
              "description": "The staker for which to complete unstaking",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["public"],
          "functionName": "completeUnstake",
          "label": "Complete My Unstake",
          "description": "Complete your unstaking process after the cooldown period has elapsed.",
          "args": []
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "changeMinStake",
          "label": "Change Min Stake",
          "description": "Change the minimum stake required to be eligible for the hat",
          "primary": true,
          "args": [
            {
              "name": "Min Stake",
              "description": "The new minimum stake",
              "type": "uint248",
              "displayType": "amountWithDecimals"
            }
          ]
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "changeJudgeHat",
          "label": "Change Judge Hat",
          "description": "Change the hat that can slash wearers",
          "args": [
            {
              "name": "Hat",
              "description": "The new judge hat",
              "type": "uint256",
              "displayType": "hat"
            }
          ]
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "changeRecipientHat",
          "label": "Change Recipient Hat",
          "description": "Change the hat whose wearer is the recipient of withdrawn slashed stakes",
          "args": [
            {
              "name": "Hat",
              "description": "The new recipient hat",
              "type": "uint256",
              "displayType": "hat"
            }
          ]
        },
        {
          "roles": ["hatAdmins"],
          "functionName": "changeCooldownPeriod",
          "label": "Change Cooldown Hat",
          "description": "Change the number of seconds that must elapse between beginning an unstake and completing it. This period should be long enough that a wearer of the Judge Hat has enough time to slash a misbehaving staker before they can unstake.",
          "args": [
            {
              "name": "Cooldown Period",
              "description": "The new cooldown period",
              "type": "uint256",
              "displayType": "seconds"
            }
          ]
        },
        {
          "roles": ["stakingJudge"],
          "functionName": "slash",
          "label": "Slash",
          "description": "Slash a staker's full stake and set bad standing",
          "primary": true,
          "args": [
            {
              "name": "Staker",
              "description": "The staker to slash",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["stakingJudge"],
          "functionName": "forgive",
          "label": "Forgive",
          "description": "Forgive a slashed address, placing them back in good standing and allowing them to stake again",
          "args": [
            {
              "name": "Staker",
              "description": "The staker to forgive",
              "type": "address",
              "displayType": "default"
            }
          ]
        },
        {
          "roles": ["stakingRecipient"],
          "functionName": "withdraw",
          "label": "Withdraw",
          "description": "Withdraw all slashed stakes to a wearer of the recipient hat",
          "primary": true,
          "args": [
            {
              "name": "Recipient",
              "description": "The recipient of the withdrawn tokens, must wear the recipient hat",
              "type": "address",
              "displayType": "default"
            }
          ]
        }
      ],
      "abi": [
        {
          "inputs": [
            { "internalType": "string", "name": "_version", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_AlreadySlashed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_CooldownNotEnded",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_HatImmutable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_InsufficientStake",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NoCooldown",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NotHatAdmin",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NotJudge",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NotRecipient",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NotSlashed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_NothingToWithdraw",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "StakingEligibility_TransferFailed",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newDelay",
              "type": "uint256"
            }
          ],
          "name": "StakingEligibility_CooldownPeriodChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "hatId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "instance",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint248",
              "name": "minStake",
              "type": "uint248"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "judgeHat",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "recipientHat",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "cooldownPeriod",
              "type": "uint256"
            }
          ],
          "name": "StakingEligibility_Deployed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "staker",
              "type": "address"
            }
          ],
          "name": "StakingEligibility_Forgiven",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newJudgeHat",
              "type": "uint256"
            }
          ],
          "name": "StakingEligibility_JudgeHatChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint248",
              "name": "newMinStake",
              "type": "uint248"
            }
          ],
          "name": "StakingEligibility_MinStakeChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newRecipientHat",
              "type": "uint256"
            }
          ],
          "name": "StakingEligibility_RecipientHatChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "wearer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint248",
              "name": "amount",
              "type": "uint248"
            }
          ],
          "name": "StakingEligibility_Slashed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint248",
              "name": "amount",
              "type": "uint248"
            }
          ],
          "name": "StakingEligibility_Staked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint248",
              "name": "amount",
              "type": "uint248"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "cooldownEnd",
              "type": "uint256"
            }
          ],
          "name": "StakingEligibility_UnstakeBegun",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "HATS",
          "outputs": [
            { "internalType": "contract IHats", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "IMPLEMENTATION",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "TOKEN",
          "outputs": [
            { "internalType": "contract IERC20", "name": "", "type": "address" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint248", "name": "_amount", "type": "uint248" }
          ],
          "name": "beginUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_cooldownPeriod",
              "type": "uint256"
            }
          ],
          "name": "changeCooldownPeriod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_judgeHat",
              "type": "uint256"
            }
          ],
          "name": "changeJudgeHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint248",
              "name": "_minStake",
              "type": "uint248"
            }
          ],
          "name": "changeMinStake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_recipientHat",
              "type": "uint256"
            }
          ],
          "name": "changeRecipientHat",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_staker", "type": "address" }
          ],
          "name": "completeUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "completeUnstake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "cooldownPeriod",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "staker", "type": "address" }
          ],
          "name": "cooldowns",
          "outputs": [
            { "internalType": "uint248", "name": "amount", "type": "uint248" },
            { "internalType": "uint256", "name": "endsAt", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_staker", "type": "address" }
          ],
          "name": "forgive",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_wearer", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "name": "getWearerStatus",
          "outputs": [
            { "internalType": "bool", "name": "eligible", "type": "bool" },
            { "internalType": "bool", "name": "standing", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hatId",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "judgeHat",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "minStake",
          "outputs": [
            { "internalType": "uint248", "name": "", "type": "uint248" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "recipientHat",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_initData", "type": "bytes" }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_staker", "type": "address" }
          ],
          "name": "slash",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "uint248", "name": "_amount", "type": "uint248" }
          ],
          "name": "stake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "staker", "type": "address" }
          ],
          "name": "stakes",
          "outputs": [
            { "internalType": "uint248", "name": "amount", "type": "uint248" },
            { "internalType": "bool", "name": "slashed", "type": "bool" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSlashedStakes",
          "outputs": [
            { "internalType": "uint248", "name": "", "type": "uint248" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version_",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ]
    }
  ]
}
